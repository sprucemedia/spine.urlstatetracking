// Generated by CoffeeScript 1.3.3
(function() {
  var StateTracker;

  StateTracker = {
    modelName: null,
    initStateTracking: function(modelName) {
      var _this = this;
      this.modelName = modelName;
      this[this.modelName].bind("change", function() {
        return _this.updateState();
      });
      $(window).bind("hashchange", function() {
        return _this.syncState();
      });
      return this.syncState();
    },
    updateState: function() {
      var key, state;
      state = this.parseHash();
      for (key in this.statefields) {
        if (this.model.hasOwnProperty(key)) {
          state[key] = this[this.modelName][key];
        }
      }
      return this.writeHash(state);
    },
    syncState: function() {
      var isDirty, key, newValue, state;
      isDirty = false;
      state = this.parseHash();
      for (key in this.statefields) {
        if (this.statefields.hasOwnProperty(key) && state.hasOwnProperty(key)) {
          newValue = this.parseValue(state[key], this.statefields[key]);
          if (newValue !== this[this.modelName][key]) {
            this[this.modelName][key] = newValue;
            isDirty = true;
          }
        }
      }
      if (isDirty) {
        return this[this.modelName].trigger("change");
      }
    },
    parseHash: function() {
      var hash, obj, pair, _fn, _i, _len, _ref;
      hash = window.location.hash.substring(1);
      obj = {};
      if (!(hash != null) || hash === "") {
        return obj;
      }
      _ref = hash.split("&");
      _fn = function(pair) {
        var split;
        split = pair.split("=");
        return obj[split[0]] = split[1];
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pair = _ref[_i];
        _fn(pair);
      }
      return obj;
    },
    writeHash: function(obj) {
      var hash, key;
      hash = '';
      for (key in obj) {
        hash += "&" + key + "=" + obj[key];
      }
      return window.location.hash = hash.substring(1);
    },
    parseValue: function(value, type) {
      switch (type) {
        case "Int":
          return parseInt(value, 10);
        case "Float":
          return parseFloat(value);
        default:
          return value;
      }
    }
  };

  this.Spine.StateTracker = StateTracker;

}).call(this);
